import * as path from "path";
import DynamicServer from "../../contrib/reports/explore-server/src/server/DynamicServer";
import { makeContent } from "../../contrib/reports/explore-server/src/server/StaticContent";
import * as reports from "../../contrib/reports/flat-files/src";
import * as bcvesFromCLI from "../bcves-from-cli";
import { Config, ToolID } from "../persistent-types";
import { UserError } from "../util";

export default async (
  config: Config,
  args: {
    import?: string;
    selectors: string[];
    tool: ToolID[];
    no_sources: boolean;
    allow_incomplete: boolean;
    port: number;
    anonymize: boolean;
    kind: string;
    non_fatal_validation_errors: boolean;
    allow_unmatched_tools: boolean;
  }
) => {
  let bcves = await bcvesFromCLI.getBCVEs(config, args, false),
    bcvesWithRuns = await bcvesFromCLI.getBCVEsWithRuns(
      config,
      args,
      args.allow_unmatched_tools
    );
  switch (args.kind) {
    case "txt": {
      return await reports.reportMaker(
        bcvesWithRuns,
        config.reports,
        reports.Format.txt
      );
    }
    case "server": {
      return await new DynamicServer(bcvesWithRuns, 8080).start();
    }
    case "html": {
      return makeContent(
        path.join(config.reports, args.kind),
        bcves,
        bcvesWithRuns
      );
    }
    default:
      throw new UserError(`Unhandled report kind: ${args.kind}`);
  }
};
